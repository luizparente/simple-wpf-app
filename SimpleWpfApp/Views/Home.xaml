<UserControl x:Class="SimpleWpfApp.Views.Home"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
			 xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
			 xmlns:converters="clr-namespace:SimpleWpfApp.Utilities.Converters"
             mc:Ignorable="d">
	<!--Setting up interaction triggers-->
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Loaded">
			<i:InvokeCommandAction Command="{Binding InitDataCommand}"/>
		</i:EventTrigger>
	</i:Interaction.Triggers>

	<!--Setting up resources-->
	<UserControl.Resources>
		<converters:NullToHiddenConverter x:Key="NullToHiddenConverter"/>
		<converters:NullToVisibleConverter x:Key="NullToVisibleConverter"/>
	</UserControl.Resources>

	<StackPanel>
		<DockPanel Margin="0 0 0 10" >
			<Label Content="Simple WPF App" DockPanel.Dock="Left" FontSize="16" FontWeight="Bold"/>
			<Button Content="Sign out" 
					Command="{Binding SignOutCommand}"
					DockPanel.Dock="Right"
					HorizontalAlignment="Right">
				<Button.Style>
					<Style TargetType="Button">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="Button">
									<ContentPresenter />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
						<Setter Property="Cursor" Value="Hand" />
						<Style.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="Button">
											<ControlTemplate.Resources>
												<Style TargetType="{x:Type TextBlock}">
													<Setter Property="TextDecorations" Value="Underline" />
												</Style>
											</ControlTemplate.Resources>
											<ContentPresenter />
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Trigger>
						</Style.Triggers>
					</Style>
				</Button.Style>
			</Button>
		</DockPanel>

		<ScrollViewer VerticalScrollBarVisibility="Auto" >
			<DataGrid ItemsSource="{Binding Things}"
					  SelectedItem="{Binding SelectedThing}"
					  AutoGenerateColumns="False" 
					  Margin="0 0 0 10"
					  Height="150"
					  IsReadOnly="True">
				<DataGrid.Columns>
					<!--

						RELATIVE BINDING:
				
						The binding for the columns defined below is no longer a reference to this view's viewmodel. 
						It now has its own data context, a Thing object being displayed.

						When this behavior is undesired, binding needs to be done via RelativeSource. A complete set 
						of valid values below, from MSDN:

						- PreviousData: Allows you to bind the previous data item (not that control that 
						contains the data item) in the list of data items being displayed.
						- TemplatedParent: Refers to the element to which the template (in which the 
						data-bound element exists) is applied. This is similar to setting a TemplateBindingExtension 
						and is only applicable if the Binding is within a template.
						- Self: Refers to the element on which you are setting the binding and allows you to 
						bind one property of that element to another property on the same element.
						- FindAncestor: Refers to the ancestor in the parent chain of the data-bound element. 
						You can use this to bind to an ancestor of a specific type or its subclasses. This is the 
						mode you use if you want to specify AncestorType and/or AncestorLevel.

						A few examples:
				
						- {Binding ElementName=SomeXamlElementName, Path=SomeXalmElementProperty}
						- {Binding SomePropertyOfAnAncestor, RelativeSource={RelativeSource AncestorType=TypeOfAncestor}}" />
						- {Binding DataContext.SomeViewModelProperty, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}
						- {Binding Path=PathToPropertyInTheSameBoundedObject, RelativeSource={RelativeSource Self}}
				
					-->
					<DataGridTextColumn Header="Some Property" Binding="{Binding SomeProperty, Mode=OneTime}" Width="3*"/>
					<DataGridTextColumn Header="Created On" Binding="{Binding CreatedOn, Mode=OneTime}" Width="*"/>
					<DataGridTextColumn Header="Updated On" Binding="{Binding UpdatedOn, Mode=OneTime}" Width="*"/>
				</DataGrid.Columns>
			</DataGrid>
		</ScrollViewer>

		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>

			<GroupBox Header="Create Thing" Grid.Column="0" Margin="0 0 5 0" Padding="10 0 5 10">
				<StackPanel>
					<Label Content="Next GUID:"/>
					<TextBox Text="{Binding NewThing.ThingGuid}" IsReadOnly="True" IsEnabled="False"/>

					<Label Content="Some Property:"/>
					<TextBox Text="{Binding NewThing.SomeProperty, UpdateSourceTrigger=PropertyChanged}"/>

					<Button Content="Create" Command="{Binding CreateCommand}" IsEnabled="{Binding CanCreate}" Margin="0 20 0 0"/>
					<Button Content="Reset" Command="{Binding ResetCommand}" Margin="0 10 0 0"/>
				</StackPanel>
			</GroupBox>

			<GroupBox Header="Thing Details" Grid.Column="1" Margin="5 0 0 0" Padding="10 0 5 10">
				<StackPanel>
					<StackPanel Visibility="{Binding SelectedThing, Converter={StaticResource NullToHiddenConverter}}">
						<Label Content="GUID:"/>
						<TextBox Text="{Binding SelectedThing.ThingGuid}" IsReadOnly="True" IsEnabled="False"/>

						<Label Content="Some Property:"/>
						<TextBox Text="{Binding SelectedThing.SomeProperty, UpdateSourceTrigger=PropertyChanged}"/>

						<Label Content="Created On:"/>
						<TextBox Text="{Binding SelectedThing.CreatedOn}" IsReadOnly="True" IsEnabled="False"/>

						<Label Content="Updated On:"/>
						<TextBox Text="{Binding SelectedThing.UpdatedOn}" IsReadOnly="True" IsEnabled="False"/>

						<Button Content="Update" Command="{Binding UpdateCommand}" IsEnabled="{Binding CanUpdate}" Margin="0 20 0 0"/>
					</StackPanel>

					<Label Content="Select a thing to view details." 
						   Visibility="{Binding SelectedThing, Converter={StaticResource NullToVisibleConverter}}"/>
				</StackPanel>
			</GroupBox>
		</Grid>
	</StackPanel>
</UserControl>
